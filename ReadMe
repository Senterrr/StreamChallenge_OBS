# Challenge Overlay (Controller + Viewer) ‚Äî Setup Guide

This project gives you a StreamElements‚Äëstyle **Controller** (full UI you operate off‚Äëstream) and a clean **Viewer** overlay (only visuals) for OBS. They communicate through a tiny local WebSocket relay.

---

## What‚Äôs in the folder

```
OBS_TEST/
‚îú‚îÄ controller.html    # The control app (open in a normal browser)
‚îú‚îÄ overlay.html       # The viewer for OBS (Browser Source)
‚îî‚îÄ ws-server/
   ‚îú‚îÄ server.js       # WebSocket relay
   ‚îî‚îÄ package.json    # Created with `npm init -y`
```

> If `package.json` doesn‚Äôt exist, create it with `npm init -y` **inside** `ws-server/`.

---

## 1) Install prerequisites

You need **Node.js 18+**. Verify in Terminal / Command Prompt:

```
node -v
```

If it‚Äôs missing:

* **macOS** (Homebrew): `brew install node`
* **Windows**: download from nodejs.org (LTS is fine) and run the installer.

---

## 2) Install the WebSocket relay (first time only)

Open a terminal **in** the `ws-server` folder and install the dependency:

```
cd /path/to/OBS_TEST/ws-server
npm init -y            # if you don‚Äôt already have package.json
npm pkg set type=module
npm install ws
```

---

## 3) Start the WebSocket relay (every time you use it)

From the same folder:

```
cd "/Users/skrebber/Documents/OBS_TEST/ws-server"
node server.js
```

You should see:

```
[relay] listening on ws://127.0.0.1:17311
```

Allow the firewall prompt if it appears.

> **Important:** Do **not** try to open `ws://127.0.0.1:17311` in the browser address bar; it‚Äôs not a web page. HTML files connect to it programmatically.

---

## 4) Open the Controller (your off‚Äëstream UI)

Open `controller.html` in Chrome / Edge / Safari:

* **macOS**:

  ```
  file:///Users/<you>/Documents/OBS_TEST/controller.html
  ```
* **Windows**:

  ```
  file:///C:/Users/<you>/Documents/OBS_TEST/controller.html
  ```

The controller connects to `ws://127.0.0.1:17311` on channel `obs_challenge_overlay` by default. You can change both at the top of the page.

What you can do:

* Edit title, items (one per line), mode (List/Wheel), Progressive, Orientation, Scale, and Insets.
* Use buttons or hotkeys: **Enter/Space** = Next/Progress (List) or Spin (Wheel), **‚Üê/Backspace** = Prev, **D** = Toggle Done, **R** = Reset, **1..9** = Jump.
* The right‚Äëhand **Preview** shows exactly what OBS will display.

The controller automatically pushes state to any viewer overlays connected to the same channel.

---

## 5) Add the Viewer to OBS

In **OBS** ‚Üí **+** ‚Üí **Browser**:

### Option A ‚Äî Local file (simple)

* Tick **Local file** and browse to `overlay.html`.
* Set the Browser Source size to your canvas (e.g., 1920√ó1080).

### Option B ‚Äî File URL (for extras by URL)

* Untick **Local file** and use a file URL, e.g.:

  ```
  file:///C:/Users/<you>/Documents/OBS_TEST/overlay.html?frame=1
  ```

  or on macOS:

  ```
  file:///Users/<you>/Documents/OBS_TEST/overlay.html?frame=1
  ```

  `frame=1` draws a dashed frame to help with alignment (remove later).

> The overlay will request the latest state from the controller via the WS relay. Make sure both use the same **channel** (default `obs_challenge_overlay`).

---

## 6) Troubleshooting

* **Panel says ‚ÄúDisconnected‚Äù**

  * Ensure `node server.js` is running and shows the listening message.
  * WS URL is exactly `ws://127.0.0.1:17311` (note `ws://`, not `https://`).
  * Channel matches between controller and overlay.
  * Allow Node in Windows/macOS firewall.

* **OBS overlay doesn‚Äôt update**

  * Channel mismatch or relay isn‚Äôt running.
  * Nudge the controller (toggle mode) to push fresh state.

* **Blank overlay page**

  * Make sure you‚Äôre loading `overlay.html` as a local file/URL, not the WS URL.

* **Multiple overlays**

  * Use different `Channel` names (e.g., `main`, `wheel2`) and open a controller per channel.

* **Control from another PC on your LAN**

  * Replace `127.0.0.1` with your machine‚Äôs LAN IP in both controller and overlay (e.g., `ws://192.168.1.50:17311`) and allow Node on Private networks.

---

## 7) Hotkeys summary (Controller window focused)

* **Enter/Space** ‚Äî Next/Progress (List) or Spin (Wheel)
* **‚Üê / Backspace** ‚Äî Prev
* **D** ‚Äî Toggle Done
* **R** ‚Äî Reset list
* **1..9** ‚Äî Jump to item

---

## 8) FAQ

**Do I need to run a web server for the HTML files?**
No. Open them directly as `file:///` URLs. Only the WebSocket relay uses Node.

**Can the overlay show UI on stream?**
No‚Äîthe overlay is visuals‚Äëonly. All editing happens in the controller.

**Can I have multiple scenes with different overlays?**
Yes. Give each scene‚Äôs overlay its own `Channel` and open a matching controller window per channel.

---

Happy streaming! üéâ
